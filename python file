import cv2
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import 
train_test_split
from sklearn.metrics import 
accuracy_score, confusion_matrix
from keras.models import Sequential
from keras.layers import Conv2D, 
MaxPooling2D, Flatten, Dense, Dropout
# Assuming hand gesture data is loaded 
into X and corresponding labels into y
# X should be a numpy array of hand 
gesture images, and y should be the 
corresponding labels
# Split the data into training and testing 
sets
X_train, X_test, y_train, y_test = 
train_test_split(X, y, test_size=0.2, 
random_state=42)
# Define image dimensions
image_height, image_width, 
num_channels = X_train.shape[1:]
# Define the CNN model architecture
model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 
3), activation='relu', 
input_shape=(image_height, 
image_width, num_channels)))
model.add(MaxPooling2D(pool_size=(2, 
2)))
model.add(Conv2D(64, kernel_size=(3, 
3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 
2)))
model.add(Conv2D(128, kernel_size=(3, 
3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 
2)))
model.add(Flatten())
model.add(Dense(256, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(1, 
activation='sigmoid'))
# Compile the model
model.compile(optimizer='adam', 
loss='binary_crossentropy', 
metrics=['accuracy'])
# Train the model
history = model.fit(X_train, y_train, 
epochs=10, batch_size=32, 
validation_data=(X_test, y_test))
# Plot training history
plt.plot(history.history['accuracy'], 
label='accuracy')
plt.plot(history.history['val_accuracy'], 
label='val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(loc='lower right')
plt.show()
# Evaluate the model
y_pred = model.predict_classes(X_test)
accuracy = accuracy_score(y_test, 
y_pred)
conf_matrix = confusion_matrix(y_test, 
y_pred)
print("Accuracy:", accuracy)
print("Confusion Matrix:\n", conf_matrix)
